# Copyright (c) 2018-2022 The MobileCoin Foundation

global:
  domain: dev.mc.dance
  node:
    ledgerDistribution:
      awsRegion: eu-central-1
      s3Bucket: mobilecoin.eu.development.chain
      startFrom: last

    networkConfig:
      threshold: '2'
      peers:
        1:
          peer:
            hostname: '{{ printf "peer1-%s.%s" .Release.Namespace .Values.global.domain }}'
            port: '443'
          signerPublicKey: ''
          ledgerArchiveLocation: '{{ with .Values.global.node.ledgerDistribution }}{{ printf "https://s3-%s.amazonaws.com/%s/%s/" .awsRegion .s3Bucket (printf "node1-%s.%s" $.Release.Namespace $.Values.global.domain) }}{{ end }}'
        2:
          peer:
            hostname: '{{ printf "peer2-%s.%s" .Release.Namespace .Values.global.domain }}'
            port: '443'
          signerPublicKey: ''
          ledgerArchiveLocation: '{{ with .Values.global.node.ledgerDistribution }}{{ printf "https://s3-%s.amazonaws.com/%s/%s/" .awsRegion .s3Bucket (printf "node2-%s.%s" $.Release.Namespace $.Values.global.domain) }}{{ end }}'
        3:
          peer:
            hostname: '{{ printf "peer3-%s.%s" .Release.Namespace .Values.global.domain }}'
            port: '443'
          signerPublicKey: ''
          ledgerArchiveLocation: '{{ with .Values.global.node.ledgerDistribution }}{{ printf "https://s3-%s.amazonaws.com/%s/%s/" .awsRegion .s3Bucket (printf "node3-%s.%s" $.Release.Namespace $.Values.global.domain) }}{{ end }}'

    # Add signed tokens.json with --set-file=global.node.tokensConfig."tokens\.signed\.json"=tokens.signed.json
    tokensConfig:
      tokensSignedJson: ""

  blocklist:
    enabled: false
    pattern: patterns/blocked-countries

mcCoreCommonConfig:
  enabled: true
  fullnameOverride: mc-core-common-config
  mobileCoinNetwork:
    network: '{{ .Release.Namespace }}'
    partner: 'dev'
  mobilecoind:
    threshold: '2'
    nodes:
    - client: '{{ printf "node1-%s.%s:443" .Release.Namespace }}'
      txSourceUrl: '{{ with .Values.global.node.ledgerDistribution }}{{ printf "https://s3-%s.amazonaws.com/%s/%s/" .awsRegion .s3Bucket (printf "node1-%s.%s" $.Release.Namespace $.Values.global.domain) }}{{ end }}'
    - client: '{{ printf "node2-%s.%s:443" .Release.Namespace }}'
      txSourceUrl: '{{ with .Values.global.node.ledgerDistribution }}{{ printf "https://s3-%s.amazonaws.com/%s/%s/" .awsRegion .s3Bucket (printf "node2-%s.%s" $.Release.Namespace $.Values.global.domain) }}{{ end }}'
    - client: '{{ printf "node3-%s.%s:443" .Release.Namespace }}'
      txSourceUrl: '{{ with .Values.global.node.ledgerDistribution }}{{ printf "https://s3-%s.amazonaws.com/%s/%s/" .awsRegion .s3Bucket (printf "node3-%s.%s" $.Release.Namespace $.Values.global.domain) }}{{ end }}'

consensusNodeConfig1:
  enabled: true
  fullnameOverride: consensus-node-1
  node:
    client:
      hostname: '{{ printf "node1-%s.%s" .Release.Namespace .Values.global.domain }}'
    peer:
      hostname: '{{ printf "peer1-%s.%s" .Release.Namespace .Values.global.domain }}'
    txSourceUrl: '{{ with .Values.global.node.ledgerDistribution }}{{ printf "https://s3-%s.amazonaws.com/%s/%s/" .awsRegion .s3Bucket (printf "node1-%s.%s" $.Release.Namespace $.Values.global.domain) }}{{ end }}'

consensusNodeConfig2:
  enabled: true
  fullnameOverride: consensus-node-2
  node:
    client:
      hostname: '{{ printf "node2-%s.%s" .Release.Namespace .Values.global.domain }}'
    peer:
      hostname: '{{ printf "peer2-%s.%s" .Release.Namespace .Values.global.domain }}'
    txSourceUrl: '{{ with .Values.global.node.ledgerDistribution }}{{ printf "https://s3-%s.amazonaws.com/%s/%s/" .awsRegion .s3Bucket (printf "node2-%s.%s" $.Release.Namespace $.Values.global.domain) }}{{ end }}'

consensusNodeConfig3:
  enabled: true
  fullnameOverride: 'consensus-node-3'
  node:
    client:
      hostname: '{{ printf "node3-%s.%s" .Release.Namespace .Values.global.domain }}'
    peer:
      hostname: '{{ printf "peer3-%s.%s" .Release.Namespace .Values.global.domain }}'
    txSourceUrl: '{{ with .Values.global.node.ledgerDistribution }}{{ printf "https://s3-%s.amazonaws.com/%s/%s/" .awsRegion .s3Bucket (printf "node3-%s.%s" $.Release.Namespace $.Values.global.domain) }}{{ end }}'

fogIngestConfig:
  enabled: true
  fogRecoveryDatabase:
    configMap:
      enabled: true
    secret:
      enabled: true

fogServicesConfig:
  enabled: true
  fogRecoveryDatabaseReader:
    configMap:
      enabled: true
  fogPublicFQDN:
    domainname: '{{ printf "fog-%s.%s" .Release.Namespace .Values.global.domain }}'
    fogReportSANs: '{{ printf "fog-report-%s.%s" .Release.Namespace .Values.global.domain }}'
